用来记录自己zookeeper代码的随身笔记

zookeeper是google的chubby项目的开源实现,它曾经作为Hadoop的子项目,在大数据领域得到广泛应用。
zookeeper以Fast Paxos算法为基础,同时为了解决活锁问题,对Fast Paxos算法进行了优化,
因此也可以广泛用于大数据之外的其他分布式系统,为大型分布式系统提供可靠的协作处理功能。


主体班是基于分布式计算的核心概念设计了主要的目的是给开发人员提供一头容易理解和开放接口从而简化分布式系统构建的任务喂
记性开会但开发中布式处理的环节并不是微不足道的事情因此我们编写了怎么说通过这本书里可以快速熟悉如何使用这个
又或者开发人员对系统逻辑的关注不够只使用很长的时间开发一个简单脆弱的竹协调性导致不可靠的单一是小李吃饭的设计保证的旗舰中心
使得应用开发人员可以更多关注应用本身逻辑而不是协同工作祝佩佩从文件系统'得到的启发提供一种简单的一片
使得开发人员可以世界通用的写作任务包括选举中.管理主力成员关系管理员说.这个包含几个应用开发库有两种实现的一片,谁都想做好一个叫实现的服务组件 组件运行在意一族专用服务器之上保证了高容错性可靠扩展性当你决定使用中方案设计有事
最好将应用数据和学生素质都离开比如网络服务中的邮箱服务

这个的时候制作说明这个不能为我们做什么就像近视弱视能为我们做什么一样可以简单的表述我知道可以让我们灵动模式但是种方式并不能完全表达路上的能力实际上不是,因为我们主场各种家具和设备身子在某些情况下离开用它来带上钻孔就算不知道银离子我们正介绍这个可能做什么吃的会比相机关注给我这样的系统功能都讨论到围绕着一条曲线他可以在分布式系统中写作多任务一个写作任务是自己的包含多个进程的任务这就是经常即便这个我可以所谓我们写作或者是为了管理竞争写作意味着多个进程需要一同处理
一同处理某些事情一些进程采取某些行动似的其他进程可以继续工作比如在电影的蛀虫工作模式中你叫什么那我开始从这点处于空闲状态是通知组织点可以结束工作你是猪.就会分配任务重解的竞争者不同他指的是两个进程不能同时处理工作的情况你的进程必须等待你的进程同样在蛀虫工作模式里之中我们想冲出.想有一个纠结的是很多金钱也许都想从中这个名字要是键盘和词牌他说也就是密特朗意思可不是
mutual exclusion对了和纸牌他说实际上我们可以认为获取主角的身份的过程其实就是获取锁的过程获取老猪.的控制说控制权说的进程记住这点精神也就是通过火炬主教练来获取全聚德所获的生活区互斥锁过滤曾经有过多线程程序的开发经验就会发现很多类似的问题实际上在一台计算机程序的多个进程何况计算机系今天
再一弹就是让雨这么多的迹象和跨计算机实际上从概念上区别并不大再多睡的情况下有用的同步愿意在分布式系统中也同样有效一个重要区别在于在电信的共享环境下在典型的不公正环境下不同的计算机之前不共享出了网络之外的其他任何信息说什么消息传递算法可以实现同步人但是使用一个提供某种游戏共享存储的组建往往更加简单这正是这个手术采用的方式你就说网络中同步源于在分布式系统当中的实现方式有我有很多种吃的这里这样说是两种一种是一种消息传递的方式可以实现可以使劲夸夫妻间的从不玩因为种方式救世主可不是常用的共享存储的方式血统并不总是采取集群选举或者是
血统并不总是采取项选举或者加锁的同步人人的形式配置元素语言是一个进程通知其他进程需要做什么的一种常用方式比如赞一个蛀虫系统中从.需要知道任务已经准备了他们即使再做决定发生崩溃情况下这些也许有效

Apache HBase
Apache Kafka
Apache Solr
Yahoo ! Fetching Service 缓存内容高效地获取网页信息
Facebook Messages

ZooKeeper Server -> ZooKeeper Client
zk的客户端拥有了.
保障强一致性,有序性和持久性.
实现通用的同步原语的能力.
简单的并发处理机制.

此处分布式系统的定义，分布式系统是同时跨多个物理主机，独立运行的多个软件组成的系统
分布式系统能利用多处理器的运算能力来运行组件，比如并行复制任务.一个系统也许由于战略的原因，
需要分布在不同地点。
独立的组件可以跨多个应用共享，系统独立的运行和协作这些组件，独立这样的组件，也简化了生产问题

分布式系统进程通信的两种方法，直接网络进行信息交换，或着共享存储
zk使用的是共享存储模型来实现协作和同步原语,而进程和存储间进行网络通信
网络通信是实现分布式系统的基础

我们可能会遇到消息延迟
因为网络拥堵，又或者基准时钟问题,先后发送给同一个端口的消息并没有同时到达
处理器性能，操作系统调度和超载也会导致消息延迟
消息延迟时间 ＝ 发送消耗时间+传输时间+接收端处理时间
如果需要更复杂的消息处理，延迟可能会更高

时钟偏移问题
处理器时间并不可靠，他们会随着使用产生偏移

zk的设计不是为了消除此类问题，而是将问题完全透明化

主-从应用架构
master-worker
         Master
   |--------|---------------|
  Worker Worker    ...  Worker
面临的问题
主节点崩溃
 如果主节点发送错误并失效,系统将无法发配新的任务或重新分配已失败的任务
从节点崩溃
 如果从节点崩溃，则已分配的任务将无法完成
通信故障
 如果主节点和从节点之间无法进行信息交换，从节点将无法得知新任务分配给它

    主节点失效时，备节点通常切换到主节点的角色，进行故障转移，对于获取恢复信息，我们不能依靠
从已经崩溃的主节点来获取这些信息，而需要从zk来获取
    状态恢复并不是唯一的重要问题，如果出现主节点有效，而备份主节点却认为主节点已经崩溃。
在高负载的情况下，延迟可能导致这样的问题发生，备主节点将会接管主节点的角色，管理整个环境的执行，
最终成为新的主节点，如果产生了脑裂问题，系统重两个或者多个部分开始独立工作，导致整体的行为不一致问题
我们需要尽力避免。

   从节点失效，客户端向主节点发送任务，之后主节点将派发到有效的从节点中，从节点接收到派发任务，
将会将执行状态回馈给主节点，再有主节点反馈给客户端。
   此刻如果从节点崩溃，这些尚未得到回复的任务，将会被重新发送，
   此刻要求主节点又能够检测崩溃节点的能力。并且检测任务的状态是否完整。

   通信故障
   当从节点断开了与主节点的通信，我们需要适应一个从节点能够接收多个任务的情况。

   关于"仅一次"和"最多一次"
   1.主节点M1派发任务T1到从节点W1上
   2.w1获取T1的锁，执行任务，最后释放锁
   3.M1怀疑W1已经崩溃，所以再次派发任务T1给W2
   4.w2获取T1的锁，执行任务，然后释放锁

   由于两个从节点执行的任务并没有交集所以T1锁并没有阻止，
   那么仅一次，和最多一次的语意就很重要了
   需要防治最终结果非一致性。

   说明实现这些语义学应用是非常困难的。

   通信故障可能导致节点崩溃，从而影响同步原语。
   客户端可以告诉zk某些数据是临时状态的(ephemeral)
   客户端需要向zk发送是否存活的通知,如果一个客户端未能及时发送通知，那么所有
   从属于这个客户端的临时状态的数据将全部被删除。通过这两个机制，在崩溃和通信故障发生时
   我们就可以预防客户端独立运行而发生的应用宕机了

   主节点选举 这是关键的一步，使得主节点可以给从节点分配任务
   崩溃检测 主节点具有检测从节点崩溃或失去连接的能力

   主节点必须拥有可执行任务的节点的列表
   元数据管理

  分布式协作的难点

  配置文件，或者元数据的一致性，这些配置文件需要实时的更新，并且全局可见
  然后是组成员关系的问题，随着负载的变化，我们希望增加或减少新机器和进程

  以及分布式应用中最常见的问题，拜占庭将军问题
  Byzantine Faults

  Fischer Lynch Patterson 证明了在一步通信的系统中，可能存在某些进程在这个特殊位置
  尚的bit位不一致，
  要求系统尽量满足一致性Consistency,可用性Availability和分区容错性
  Partition-tolerance 我们要求系统满足此三类信息，但是通常zk只能满足前两者
  Michael J. Fischer， Nancy A. Lynch， and Michael S. Paterson.“ Impossibility of Distributed Consensus with One Faulty Process.” Proceedings of the 2nd ACM SIGACT- SIGMOD Symposium on Principles of Database Systems，（ 1983）， doi： 10. 1145/ 588058. 588060.

  荣凯拉（Junqueira F.）; 里德（Reed B.）. ZooKeeper：分布式过程协同技术详解 (O’Reilly精品图书系列) (Kindle 位置 431-433). 机械工业出版社. Kindle 版本.

  Seth Gilbert and Nancy Lynch.“ Brewer’ s Conjecture and the Feasibility of Consistent， Available， Partition- Tolerant Web Services.” ACM SIGACT News， 33： 2（ 2002）， doi： 10. 1145/ 564585. 564601.

荣凯拉（Junqueira F.）; 里德（Reed B.）. ZooKeeper：分布式过程协同技术详解 (O’Reilly精品图书系列) (Kindle 位置 434-435). 机械工业出版社. Kindle 版本.

  笔者反复提出，zk的思路是针对这些问题，提供了优雅的解决框架


















